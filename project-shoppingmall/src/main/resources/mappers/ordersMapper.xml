<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace ="com.choongang.shoppingmall.dao.OrderDAO">
	<!-- 주문개수 세기 -->
	<select id="selectOrderCount" resultType="int" parameterType="hashmap">
		select count(*) from orders
		<where>
			<choose>
				<when test="search != null and search != '0'.toString()">
					${field} like '%'||#{search}||'%'
				</when>
				<when test="search == 0">
					${field} like #{search}
				</when>
			</choose>
		</where>
	</select>
	<!-- 한 페이지 얻기 -->
	<select id="selectAdminOrderList" parameterType="hashmap" resultType="OrdersVO">
		select 
			R.*
		from
		(
			select 
				rownum rnum, Q.*
			from
				(select DISTINCT o.order_id, (SELECT COUNT(i.ORDER_ITEM_ID) FROM ORDER_ITEM i WHERE o.ORDER_ID=i.ORDER_ID) itemcount,
				 o.user_id, o.total_price, o.payment_type, o.status, o.order_date, o.invoice, u.username from orders o join users u on o.user_id=u.user_id
				<where>
					<choose>
						<when test="search != null and search != '0'.toString()">
							${field} like '%'||#{search}||'%'
						</when>
						<when test="search == 0">
							${field} like #{search}
						</when>
					</choose>
				</where>
				order by o.order_id desc) Q
			where
			<![CDATA[
				rownum<=#{endNo}
				]]>
		) R
		where
		<![CDATA[
			rnum >= #{startNo}
		]]>
	</select>
	<!-- 주문아이디로 주문내역 가져오기 -->
	<select id="selectOrderById" parameterType="int" resultType="OrdersVO">
		select * from orders where order_id=#{order_id}
	</select>
	<!-- 주문아이디로 주문아이템 가져오기 -->
	<select id="selectOrderItemByOrderId" parameterType="int" resultType="Order_ItemVO">
		select i.ORDER_ITEM_ID, i.QUANTITY, p.PRODUCT_ID, p.PRODUCT_NAME, p.PRODUCT_PRICE, p.DISCOUNT, i.PRODUCT_OPTION, o.STATUS , (PRODUCT_PRICE*QUANTITY) bsum,(PRODUCT_PRICE*(1-discount/100.0)*QUANTITY) asum 
		from order_item i join product p on i.product_id=p.product_id JOIN ORDERS o ON i.ORDER_ID=o.ORDER_ID 
		where i.order_id=#{order_id}
	</select>
	<!-- 결제정보 주문금액 -->
	<select id="paymentPriceInfo" parameterType="int" resultType="Order_ItemVO">
		select COUNT(ORDER_ITEM_ID) itemcount, SUM((p.PRODUCT_PRICE*i.QUANTITY)) btotal, SUM((p.PRODUCT_PRICE*p.DISCOUNT/100.0 *i.QUANTITY)) dis from orders o JOIN ORDER_ITEM i ON o.ORDER_ID=i.ORDER_ID JOIN PRODUCT p ON i.PRODUCT_ID=p.PRODUCT_ID where o.order_id=#{order_id}
	</select>
	<!-- 주문상태 배송중 변경 -->
	<update id="orderStatusUpdateShipping" parameterType="int">
		update orders set status='배송중' where order_id=#{order_id}
	</update>
<<<<<<< HEAD
	<!-- 주문상태 배송완료 변경 -->
	<update id="orderStatusUpdateDelivery" parameterType="int">
		update orders set status='배송완료' where order_id=#{order_id}
	</update>
	<!-- 송장번호 저장 -->
	<update id="updateInvoice" parameterType="OrdersVO">
		update orders set invoice=#{invoice} where order_id=#{order_id}
	</update>
	<!-- 마이페이지 리뷰관리 : status가 '배송완료'인 경우(현재 테스트 위해서 '결제완료'로 작업중) -->
=======
	
	<!-- 마이페이지 리뷰관리 : status가 '배송완료'인 경우 -->
>>>>>>> f7658c7c21681f0e58c66a9d0dea0feca3c35f5f
	<!-- 아이디별 주문 내역 -->
	<select id="selectByMyReview" parameterType="int" resultType="MyPageReviewInfo">
		select o.order_id, oi.order_item_id, oi.product_id, oi.quantity, oi.order_price, o.user_id, o.ORDER_DATE, oi.review_status, oi.product_option
		from orders o, order_item oi
		where o.order_id = oi.order_id and oi.user_id=#{user_id} and o.status='배송완료' and oi.review_status = 'on'
	</select>
	<!-- 아이디별 주문 내역 갯수 -->
	<select id="selectByMyReviewCount" parameterType="int" resultType="int">
		select count(*)
		from orders o, order_item oi
		where o.order_id = oi.order_id and oi.user_id=#{user_id} and o.status='배송완료' and oi.review_status = 'on'
	</select>
	<!-- 리뷰작성 숨기기 시 상태변경 -->
	<update id="updateReviewStatus" parameterType="int">
		update order_item
		set review_status='off'
		where order_item_id=#{order_item_id}
	</update>
	<!-- 주문 상품 id로 주문 상품 한개 가져오기  -->
	<select id="selectOrderItemByOrderItemId" parameterType="int" resultType="Order_ItemVO">
		select * from order_item where order_item_id=#{order_item_id}
	</select>
	
	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->
	
	<!-- 주문 테이블 저장 -->
	<insert id="addToOrder" parameterType="OrdersVO">
    	insert into orders(order_id, user_id, merchant_uid, total_price, payment_type, status, address, order_date, request_type)
   		values (order_id_seq.nextval, #{user_id}, #{merchant_uid}, #{total_price}, #{payment_type}, #{status}, #{address}, sysdate, #{request_type})
	</insert>
	
	<!-- 주문 상품 리스트 저장 -->
	<insert id="addToOrderItems" parameterType="Order_ItemVO">
   		insert into order_item(order_item_id, order_id, user_id, product_id, quantity, order_price, product_option)
    	values(order_item_id_seq.nextval, #{order_id}, #{user_id}, #{product_id}, #{quantity}, #{order_price}, #{product_option})
	</insert>
	
	<!-- 가장 큰 주문 번호 가져오기 -->
	<select id="selectMaxOrderId" resultType="int">
		select max(order_id) FROM orders
	</select>
	
	<!-- 첫번째 주문 데이터 가져올때만 사용한다. -->
	<select id="selectFirstOrdersId" resultType="Integer">
		select order_id from orders
	</select>
	
	<select id="getOrderStatsByUserId" resultType="java.util.Map">
    SELECT 
        COUNT(*) AS order_count, 
        SUM(total_price) AS total_sum 
    FROM orders 
    WHERE user_id = #{userId}
	</select>

  <!-- Result Mapping -->
    <resultMap id="OrdersResultMap" type="OrdersVO">
        <id property="order_id" column="order_id" />
        <result property="user_id" column="user_id" />
        <result property="total_price" column="total_price" />
        <result property="order_date" column="order_date" />
        <result property="status" column="status" />
        <collection property="orderItems" ofType="Order_ItemVO">
            <result property="product_id" column="product_id" />
            <result property="product_name" column="product_name" />
            <result property="quantity" column="quantity" />
        </collection>
    </resultMap>
    
  <!--   특정 유저의 주문 상세정보(orders) 조회-->
     <select id="getOrdersByUserId" parameterType="int" resultMap="OrdersResultMap">
        SELECT 
            o.order_id,
            o.user_id,
            o.total_price,
            o.order_date,
            o.status,
            oi.product_id,
            p.product_name,
            oi.quantity
        FROM orders o
        LEFT JOIN order_item oi 
        ON o.order_id = oi.order_id
        LEFT JOIN 
    	product p
    	ON 
   		oi.product_id = p.product_id
        WHERE o.user_id = #{userId}
        ORDER BY o.order_date DESC
    </select>
 
</mapper>